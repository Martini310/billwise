version: '3.9'
services:
  django: &django
    build:
      context: .
      dockerfile: Dockerfile.django
      target: django   # Use the Django stage
    # volumes:
    #   - .:/app
    ports:
      - "8000:8000"
    depends_on:
      # - rabbitmq
      - redis
      - postgres
      # - celery_worker
    # env_file:
    #   - .env
    environment:
      - DJANGO_SETTINGS_MODULE=billwise.settings
      # - CELERY_BROKER=pyamqp://guest@rabbitmq:5672//
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379
      - IN_DOCKER=1
      - SITE_ID=${SITE_ID}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_FIRST_NAME=${DJANGO_SUPERUSER_FIRST_NAME}
      - CREATE_SUPERUSER=true
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    networks:
      - backend-network
    # command: python manage.py runserver 0.0.0.0:8000
    # command: sh -c "python manage.py migrate; python manage.py runserver 0.0.0.0:8000"
    # command: ./build.sh
    command: sh ./build.sh

  # nextjs:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.nextjs
  #   volumes:
  #     - ./frontend:/frontend
  #   #   - /frontend/node_modules
  #   #   - /frontend/.next
  #   ports:
  #     - "3000:3000"
  #   # depends_on:
  #   #   - postgres
  #   # env_file:
  #   #   - ./frontend/.env.local
  #   environment:
  #     NEXTAUTH_BACKEND_URL: http://django:8000/api/
  #     NEXT_PUBLIC_URL: http://127.0.0.1:8000/api/
  #     NEXTAUTH_URL: http://127.0.0.1:3000/
  #   networks:
  #     - backend-network

  # rabbitmq:
  #   image: "rabbitmq:3.12-alpine"
  #   ports:
  #     - "15672:15672"  # RabbitMQ management UI
  #     - "5672:5672"    # RabbitMQ
  #   networks:
  #     - backend-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - backend-network

  postgres:
    container_name: postgres
    image: postgres:12-alpine
    environment:
      POSTGRES_DB: billwise_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    networks:
      - backend-network

  celery_worker:
    build:
      context: .
      # dockerfile: Dockerfile.celery
      dockerfile: Dockerfile.django
      target: celery   # Use the Celery stage
    depends_on:
      - redis
      # - rabbitmq
      - postgres
      # - django
    # env_file:
    #   - .env
    environment:
      # - CELERY_BROKER=pyamqp://guest@rabbitmq:5672//
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - SITE_ID=${SITE_ID}
      - CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=True
      - CELERY_BROKER_CONNECTION_MAX_RETRIES=100
      - CELERY_BROKER_CONNECTION_RETRY_DELAY=5  # Retry every 5 seconds
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    networks:
      - backend-network
    ports: []
    # command: celery -A billwise worker -l INFO -c 4
    # command: bash -c "sleep 240 && celery -A billwise worker -l INFO -c 1"
    command: sh -c "sleep 180 && celery -A billwise worker -l INFO -c 1"
    # command: bash -c "sleep 240 && celery -A billwise worker -l INFO -c 4 --beat --scheduler django_celery_beat.schedulers:DatabaseScheduler"

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.django
      # target: beat   # Use the beat stage
      target: celery
    depends_on:
      # - rabbitmq
      - redis
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - SITE_ID=${SITE_ID}
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379
      - CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=True
      - CELERY_BROKER_CONNECTION_MAX_RETRIES=100
      - CELERY_BROKER_CONNECTION_RETRY_DELAY=5  # Retry every 5 seconds
    # env_file:
    #   - .env
    networks:
      - backend-network
    # command: celery -A billwise beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    # command: bash -c "sleep 300 && celery -A billwise beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    command: sh -c "sleep 240 && celery -A billwise beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"


  # flower:
  #   image: mher/flower
  #   depends_on:
  #     - celery_worker
  #     - celery_beat
  #   command: celery flower
  #   environment:
  #     - CELERY_BROKER_URL=pyamqp://guest@rabbitmq:5672//
  #     - FLOWER_PORT=5555
  #   ports:
  #   - "5555:5555"
  #   networks:
  #     - backend-network

volumes:
  # postgres_data:
  postgres-data:

networks:
  backend-network:
    driver: bridge
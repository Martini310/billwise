"""
Django settings for billwise project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')

# DEBUG = 'RENDER' not in os.environ
# DEBUG = 'IN_DOCKER' not in os.environ
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'corsheaders',
    'base',
    'users',
    'rest_framework_simplejwt.token_blacklist',
    'django_celery_beat',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth',
    'dj_rest_auth.registration',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',

    # 'django.middleware.common.CommonMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.middleware.security.SecurityMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware',
    # 'corsheaders.middleware.CorsMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # 'allauth.account.middleware.AccountMiddleware',
    # 'rest-framework-simplejwt.middleware.JWTRefreshTokenMiddleware',  # Include the JWT refresh token middleware
    
]

ROOT_URLCONF = 'billwise.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'billwise.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
if 'IN_DOCKER' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'billwise_db',
            'USER': 'admin',
            'PASSWORD': 'admin',
            'HOST': 'db',   # Use the service name from Docker Compose
            'PORT': '5432',
        }
    }
elif 'RENDER' in os.environ:
    DATABASES = {
        'default': dj_database_url.config(                
            default='postgresql://postgres:postgres@localhost:5432/billwise',
            conn_max_age=600
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

if 'RENDER' in os.environ:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'dj_rest_auth.utils.JWTCookieAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated'
    # ],
}

# Custon user model
AUTH_USER_MODEL = "users.NewUser"

if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ORIGIN_ALLOW_ALL = True # Only for production
else:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:3000/",
        "http://127.0.0.1:3000/",
        "https://billwise.onrender.com",
        "https://bill-wise.onrender.com",
    ]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=50),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    }


# Celery configuration
if not DEBUG or 'RENDER' in os.environ or 'IN_DOCKER' in os.environ:
    CELERY_BROKER_URL = os.environ.get('CELERY_BROKER', 'pyamqp://guest@rabbitmq:5672//')
    # CELERY_RESULT_BACKEND = 'rpc://'  # Use RPC result backend, adjust as needed
    # CELERY_RESULT_BACKEND = 'db+postgresql://admin:admin@localhost:5432/billwise_db'

    # Include tasks from all installed apps
    CELERY_IMPORTS = ('base.tasks',)

    CELERY_DEFAULT_QUEUE = 'default'
    CELERY_WORKER_CONCURRENCY = 4
    CELERY_TASK_TIME_LIMIT = 300
    CELERY_TASK_MAX_RETRIES = 3

# Celery Beat (periodic task scheduler) configuration
CELERY_BEAT_SCHEDULE = {
    'scheduled_synchronizing_data': {
        'task': 'base.tasks.scheduled_get_data',
        'schedule': timedelta(minutes=10),
    },
}

# CELERY_BEAT_SCHEDULE = {
#     "scheduled_task": {
#         "task": "base.tasks.add",
#         "schedule": 5.0,
#         "args": (20,10),
#     },
# }

SITE_ID = 1
# SOCIALACCOUNT_STORE_TOKENS = True
# SOCIALACCOUNT_LOGIN_ON_GET = True
# LOGIN_REDIRECT_URL = '/'
# LOGIN_REDIRECT_URL = 'http://127.0.0.1:3000/'
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_REQUIRED = False

REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": False,
}

# REST_USE_JWT = True
# REST_AUTH_SERIALIZERS = {
#     'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserSerializer'
# }

# SOCIALACCOUNT_AUTO_SIGNUP = True
# ACCOUNT_UNIQUE_EMAIL = True
# AUTO_SIGNUP = True
# SOCIALACCOUNT_ADAPTER = 'billwise.views.CustomSocialAccountAdapter'
# SESSION_COOKIE_DOMAIN = 'http://localhost:3000/'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
            # 'https://www.googleapis.com/auth/gmail.readonly',
            ],
        'AUTH_PARAMS': {
            'access_type': 'online'
        },
        "VERIFIED_EMAIL": True,
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT'),
            'secret': os.environ.get('GOOGLE_SECRET'),
            'key': ''
        }
    }
}
